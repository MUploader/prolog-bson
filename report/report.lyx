#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Design and Implementation
\begin_inset Newline newline
\end_inset

of a MongoDB Driver for Prolog
\end_layout

\begin_layout Author
Sebastian LundstrÃ¶m
\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Abstract
To make MongoDB and Prolog work together, an intermediate layer is needed
 to handle the communication.
 Implementing such a layer, or driver, involves handling the network communicati
on and encapsulating the functionality offered by MongoDB in native Prolog
 predicates.
 This thesis presents how the fundamentals of such a driver can be designed,
 developed and used, and provides a discussion on how to further develop
 the driver and make it ready for production.
\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Mongo\SpecialChar \-
DB is a document-oriented database system with a strong focus on flexibilit
y, scalability and performance.
 Document-orientation involves leaving the row-centric concept of the relational
 database model, and introducing the much more flexible notion of a document.
 Document-orientation avoids rigid database schemas and also promotes a
 certain degree of denormalization which allows embedding documents into
 each other, leading to potentially much better performance by avoiding
 the need for expensive join operations.
\end_layout

\begin_layout Standard
Prolog, being an untyped language, agrees with the document-oriented approach
 of relaxing manifests in order to create more dynamic and flexible systems.
 Embedding terms in other terms is natural in Prolog, and embedding documents
 in other documents is natural in Mongo\SpecialChar \-
DB.
\end_layout

\begin_layout Standard
In order to use Mongo\SpecialChar \-
DB from a programming language, some kind of interface,
 or 
\begin_inset Quotes eld
\end_inset

driver
\begin_inset Quotes erd
\end_inset

, must sit in-between the database system and the language to handle the
 communication.
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The purpose of this thesis is to discuss the design and implementation of
 a Mongo\SpecialChar \-
DB driver for Prolog.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
The aim of this thesis is not to create a feature-complete production-ready
 driver, but to cover basic CRUD (Create, Read, Update, Delete) functionality
 and connection handling, laying the foundation for further development.
 More advanced Mongo\SpecialChar \-
DB features such as replication and file storage are
 not covered.
\end_layout

\begin_layout Standard
Due to the lack of proper standardization within the Prolog community, maintaini
ng portability between different Prolog implementations is difficult and
 not actively pursued.
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Standard
This chapter briefly discusses Mongo\SpecialChar \-
DB and Prolog.
\end_layout

\begin_layout Subsection
MongoDB
\end_layout

\begin_layout Standard
Mongo\SpecialChar \-
DB is a document-oriented database management system that emphasizes
 speed, scalability and flexibility.
 This is accomplished by avoiding fixed database schemas and, by sacrificing
 joins, requiring a certain degree of denormalization by embedding documents
 into each other.
 See Chodorow and Dirolf (2010) for a more complete discussion.
\end_layout

\begin_layout Subsubsection
Document-Orientation
\end_layout

\begin_layout Standard
Mongo\SpecialChar \-
DB employs a document-oriented view of data 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
 Instead of focusing on the 
\begin_inset Quotes eld
\end_inset

row
\begin_inset Quotes erd
\end_inset

 as the primary data entity, document-orientation introduces the notion
 of a 
\begin_inset Quotes eld
\end_inset

document
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
A document in Mongo\SpecialChar \-
DB resides in a 
\begin_inset Quotes eld
\end_inset

collection
\begin_inset Quotes erd
\end_inset

 in which no predefined schema is enforced.
 Therefore, documents in a collection need not share the same structure.
 This allows for great flexibility, especially with data migrations, as
 individual documents can be modified freely without updating a schema and
 affecting all documents in a collection 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
\end_layout

\begin_layout Standard
A document consists of key/value pairs, where keys are strings and values
 can be of many different types, including other documents (embedded documents).
 Allowing recursive structures in the database is a step away from the more
 traditional concepts used in relational databases, where a high degree
 of normalization is often desired.
 Relaxing the need for normalization makes it possible to create highly
 efficient systems by avoiding expensive join operations 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Main Features
\end_layout

\begin_layout Paragraph
Document-Orientation
\end_layout

\begin_layout Standard
Mongo\SpecialChar \-
DB is designed to be easy to scale, a goal which is easier to achieve
 when the relational model is not used.
 Document-oriented databases are more flexible and impose less restrictions
 on the layout of data, allowing for complex data structures to be stored
 within a single document 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
\end_layout

\begin_layout Paragraph
Scalability
\end_layout

\begin_layout Standard
The Mongo\SpecialChar \-
DB approach to scaling involves 
\begin_inset Quotes eld
\end_inset

scaling out
\begin_inset Quotes erd
\end_inset

 -- the process of adding more commodity servers to a cluster instead of
 replacing existing servers with better (and more expensive) ones 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
 Adding more machines when the need arises is straight-forward and the database
 system itself figures out how to best configure the machines.
\end_layout

\begin_layout Paragraph
Low Maintenance
\end_layout

\begin_layout Standard
Because there are no database schemas, and databases and collections can
 be created on-the-fly without explicit commands, Mongo\SpecialChar \-
DB requires very
 little manual maintenance.
 The database system is designed to be very automatic 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Interactive Shell
\end_layout

\begin_layout Standard
Mongo\SpecialChar \-
DB includes an interactive JavaScript-based shell that can be used
 to conveniently access the database system 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
 In JavaScript, documents are represented as objects.
 The example in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:inserting-and-finding"

\end_inset

 illustrates the beginning of a shell session to create a simple blog database.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},breaklines=true,numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:inserting-and-finding"

\end_inset

Inserting and finding documents.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

$ mongo
\end_layout

\begin_layout Plain Layout

MongoDB shell version: 1.8.1
\end_layout

\begin_layout Plain Layout

connecting to: test
\end_layout

\begin_layout Plain Layout

> use blog
\end_layout

\begin_layout Plain Layout

switched to db blog
\end_layout

\begin_layout Plain Layout

> db.posts.insert(
\end_layout

\begin_layout Plain Layout

    { "title" : "My first post",
\end_layout

\begin_layout Plain Layout

      "content" : "First post!" })
\end_layout

\begin_layout Plain Layout

> db.posts.insert(
\end_layout

\begin_layout Plain Layout

    { "title" : "Second post",
\end_layout

\begin_layout Plain Layout

      "content" : "Post number 2." })
\end_layout

\begin_layout Plain Layout

> db.posts.find()
\end_layout

\begin_layout Plain Layout

{ "_id" : ObjectId("4dfb6a5de8d172995e7874d7"),
\end_layout

\begin_layout Plain Layout

  "title" : "My first post",
\end_layout

\begin_layout Plain Layout

  "content" : "First post!" }
\end_layout

\begin_layout Plain Layout

{ "_id" : ObjectId("4dfcbec7e8d172995e7874d8"),
\end_layout

\begin_layout Plain Layout

  "title" : "Second post",
\end_layout

\begin_layout Plain Layout

  "content" : "Post number 2." }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line
\begin_inset space ~
\end_inset

4 switches to the database called 
\begin_inset Quotes eld
\end_inset

blog
\begin_inset Quotes erd
\end_inset

, but does not create it.
 Lines
\begin_inset space ~
\end_inset

6 and 9 insert two documents into the collection 
\begin_inset Quotes eld
\end_inset

posts
\begin_inset Quotes erd
\end_inset

.
 The first insert is the first command to manipulate data inside the database,
 so this triggers the actual creation of both the database and the collection.
 Because no arguments are passed to the 
\begin_inset Quotes eld
\end_inset

find
\begin_inset Quotes erd
\end_inset

 call on line
\begin_inset space ~
\end_inset

12, it retrieves all documents in the collection, which are the ones we
 just inserted.
\end_layout

\begin_layout Standard
A new field called 
\begin_inset Quotes eld
\end_inset

_id
\begin_inset Quotes erd
\end_inset

 has been added to both documents.
 Unless a document already has such a field, one is automatically generated
 by the database when it is first inserted.
 This field must be able to uniquely identify documents within a collection
 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
\end_layout

\begin_layout Standard
Adding a comment to the first blog post is illustrated in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:adding-a-field"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:adding-a-field"

\end_inset

Adding a field to a document.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

> db.posts.update(
\end_layout

\begin_layout Plain Layout

    { "_id" : ObjectId("4dfb6a5de8d172995e7874d7") },
\end_layout

\begin_layout Plain Layout

    { "$set" : { "comments" : [ "Good post!" ] } },
\end_layout

\begin_layout Plain Layout

    false,
\end_layout

\begin_layout Plain Layout

    false)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An update expects four arguments: a document indicating which document(s)
 to update, a document describing the update to perform, and two booleans
 indicating whether to perform an 
\begin_inset Quotes eld
\end_inset

upsert
\begin_inset Quotes erd
\end_inset

 (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "par:Update-Documents"

\end_inset

) and if multiple documents should be updated if the query matches more
 than one.
\end_layout

\begin_layout Standard
The document describing the update to perform (the second argument) includes
 a special field called 
\begin_inset Quotes eld
\end_inset

$set
\begin_inset Quotes erd
\end_inset

.
 This field is a document that contains fields to be set (in this case added)
 in the updated document.
 Displaying all documents after performing the update is illustrated in
 listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:displaying-documents-of"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:displaying-documents-of"

\end_inset

Displaying documents of different structure.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

> db.posts.find()
\end_layout

\begin_layout Plain Layout

{ "_id" : ObjectId("4dfcbec7e8d172995e7874d8"),
\end_layout

\begin_layout Plain Layout

  "title" : "Second post",
\end_layout

\begin_layout Plain Layout

  "content" : "Post number 2." }
\end_layout

\begin_layout Plain Layout

{ "_id" : ObjectId("4dfb6a5de8d172995e7874d7"),
\end_layout

\begin_layout Plain Layout

  "comments" : [ "Good post!" ],
\end_layout

\begin_layout Plain Layout

  "content" : "First post!",
\end_layout

\begin_layout Plain Layout

  "title" : "My first post" }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The updated document now contains an embedded array with a single comment.
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:adding-to-an-array"

\end_inset

 shows what happens if another comment is added.
 This time, a special field called 
\begin_inset Quotes eld
\end_inset

$push
\begin_inset Quotes erd
\end_inset

 is used which pushes a value onto the end of an array.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:adding-to-an-array"

\end_inset

Adding to an array.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

> db.posts.update(
\end_layout

\begin_layout Plain Layout

    { "_id" : ObjectId("4dfb6a5de8d172995e7874d7") },
\end_layout

\begin_layout Plain Layout

    { "$push" : { "comments" : "Interesting." } },
\end_layout

\begin_layout Plain Layout

    false,
\end_layout

\begin_layout Plain Layout

    false)
\end_layout

\begin_layout Plain Layout

> db.posts.find()
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

{ "_id" : ObjectId("4dfb6a5de8d172995e7874d7"),
\end_layout

\begin_layout Plain Layout

  "comments" : [ "Good post!", "Interesting." ],
\end_layout

\begin_layout Plain Layout

  "content" : "First post!",
\end_layout

\begin_layout Plain Layout

  "title" : "My first post" }
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
BSON
\begin_inset CommandInset label
LatexCommand label
name "sub:BSON"

\end_inset


\end_layout

\begin_layout Standard
At the core of Mongo\SpecialChar \-
DB lies the BSON (Binary JSON) 
\begin_inset CommandInset citation
LatexCommand cite
key "bson"

\end_inset

 data format which is used to communicate data as well as store data on
 disk.
 When a driver communicates with a Mongo\SpecialChar \-
DB instance, documents are transmitted
 over the network as a series of BSON encoded bytes.
\end_layout

\begin_layout Standard
BSON is similar to and heavily influenced by JSON (JavaScript Object Notation)
 
\begin_inset CommandInset citation
LatexCommand cite
key "json"

\end_inset

, the main difference being that BSON is a binary format whereas JSON is
 plain-text.
 The reason for using a binary format is efficiency.
 With JSON, numbers need to be converted to and from text in order to be
 used.
 This kind of conversion is generally slow, and BSON therefore extends the
 JSON model with a set of data types that can be parsed directly.
 For instance, a 32-bit integer is encoded in BSON as four consecutive little-en
dian bytes.
 This wastes some space for small integers, but is much faster to parse
 
\begin_inset CommandInset citation
LatexCommand cite
key "bson"

\end_inset

.
\end_layout

\begin_layout Subsection
Prolog
\end_layout

\begin_layout Standard
Prolog is an interpreted and dynamic language with its roots in logic.
 It is also a declarative language, implying that the programmer specifies
 
\emph on
what
\emph default
 the program is supposed to solve, not 
\emph on
how
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "bratko"

\end_inset

.
\end_layout

\begin_layout Standard
This section gives a small introduction to Prolog in order to more easily
 appreciate the code examples in subsequent sections.
 See Clocksin and Mellish (1994) or Bratko (2001) for more complete discussions.
\end_layout

\begin_layout Subsubsection
Type System
\end_layout

\begin_layout Standard
The type system used in Prolog is dynamic, and the fundamental data type
 is the 
\begin_inset Quotes eld
\end_inset

term
\begin_inset Quotes erd
\end_inset

, which can be any value 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
 Being dynamic means that variables can be bound to anything and need not
 be explicitly assigned a fixed type.
\end_layout

\begin_layout Subsubsection
Data Structures
\end_layout

\begin_layout Standard
The main primitives in Prolog are 
\emph on
integer
\emph default
s, 
\emph on
floats
\emph default
 and 
\emph on
atom
\emph default
s.
 In SWI-Prolog, integers are unbounded and floats are represented as 64-bit
 IEEE 754 doubles.
 Atoms represent UTF-8 (Unicode Transformation Format, 8-bit) encoded text
 
\begin_inset CommandInset citation
LatexCommand cite
key "swi"

\end_inset

.
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:primitives-in-prolog"

\end_inset

 exemplifies the syntax for integers, floats and atoms.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:primitives-in-prolog"

\end_inset

Primitives in Prolog.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

42
\end_layout

\begin_layout Plain Layout

5.5
\end_layout

\begin_layout Plain Layout

atom
\end_layout

\begin_layout Plain Layout

'a longer atom'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
structure
\emph default
 is a compound value with a fixed number of components and possibly a name
 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
 The components are terms that need not share the same type and can be anything,
 including variables and other structures.
 Structures are often used to represent trees.
 Structures are shown in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:structures-in-prolog"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:structures-in-prolog"

\end_inset

Structures in Prolog.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

person(john, 32)
\end_layout

\begin_layout Plain Layout

(nameless, structure)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
list
\emph default
 is a sequence of zero or more terms which need not share the same type
 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
 A non-empty list is a recursive structure that consists of a 
\begin_inset Quotes eld
\end_inset

head
\begin_inset Quotes erd
\end_inset

 which is the first element, and a 
\begin_inset Quotes eld
\end_inset

tail
\begin_inset Quotes erd
\end_inset

 which is itself a list of all elements except the first.
 If a list has only one element, its tail is the empty list.
 The empty list has neither head nor tail.
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:lists-in-prolog"

\end_inset

 shows an empty and a non-empty list.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:lists-in-prolog"

\end_inset

Lists in Prolog.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[]
\end_layout

\begin_layout Plain Layout

[1, hello(world), 5.5]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Unification
\end_layout

\begin_layout Standard
In Prolog, there is no conventional 
\begin_inset Quotes eld
\end_inset

assignment
\begin_inset Quotes erd
\end_inset

 operation.
 Instead, value propagation is performed by a mechanism called 
\begin_inset Quotes eld
\end_inset

unification
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

matching
\begin_inset Quotes erd
\end_inset

.
 Unification is the process of trying to make two terms equal 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

, and is usually performed by the 
\begin_inset Quotes eld
\end_inset

equals
\begin_inset Quotes erd
\end_inset

 infix operator.
\end_layout

\begin_layout Standard
Variables are denoted by an uppercase initial.
 A variable can be bound to any term, but once bound, it is immutable and
 cannot be rebound.
\end_layout

\begin_layout Standard
The unification 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

X = hello
\end_layout

\end_inset

 succeeds, and the variable 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

X
\end_layout

\end_inset

 is bound, or instantiated, to the atom 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

hello
\end_layout

\end_inset

.
 The unification 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

[1,2,3,4,5] = [H|T]
\end_layout

\end_inset

 will result in 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

H
\end_layout

\end_inset

 being bound to the integer 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

1
\end_layout

\end_inset

, and 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

T
\end_layout

\end_inset

 being bound to the list 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

[2,3,4,5]
\end_layout

\end_inset

.
 The vertical bar is used to indicate that everything to the right of it
 represents the tail of the list, in other words, any and all elements that
 are not explicitly unified from the start of the list.
 This is necessary in order to work with lists of unknown length.
 The unification 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

A = B
\end_layout

\end_inset

 binds the variables together, so as soon as one of them is bound to a value
 later on, the other will be bound to the same thing.
\end_layout

\begin_layout Standard
An unsuccessful unification is for instance 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

[a,b,c] = [a,b,d]
\end_layout

\end_inset

.
 The lengths of the lists match, but the atoms 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

c
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

d
\end_layout

\end_inset

 are different and cannot be unified.
 The unification 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

foo(a,b,c) = foo(A,A,C)
\end_layout

\end_inset

 fails because this would require 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

a
\end_layout

\end_inset

 and 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

b
\end_layout

\end_inset

 to be the same atom.
\end_layout

\begin_layout Subsubsection
Program Structure
\begin_inset CommandInset label
LatexCommand label
name "sub:Program-Structure"

\end_inset


\end_layout

\begin_layout Standard
The fundamental unit of code in Prolog is the predicate (also called relation)
 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
 A predicate consists of one or more clauses, together forming a logical
 disjunction.
 The value of any predicate is either true or false, indicating whether
 the predicate succeeded.
 Any other output must be specified as output-arguments that become bound
 by the predicate before it returns.
 The convention used for argument order is input-arguments first, intermediate
 values in the middle, and output-arguments last 
\begin_inset CommandInset citation
LatexCommand cite
key "guidelines"

\end_inset

.
\end_layout

\begin_layout Standard
A program to calculate the number of elements in a list is given in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:length-program"

\end_inset

.
 This predicate follows the conventional argument order and uses an 
\begin_inset Quotes eld
\end_inset

accumulator
\begin_inset Quotes erd
\end_inset

 to construct the final result.
 An accumulator is a fabricated extra argument that holds the state of something
 produced 
\begin_inset Quotes eld
\end_inset

so far
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:length-program"

\end_inset

A program relating a list to its length, using an accumulator.
\end_layout

\end_inset

length([], N, N).
\end_layout

\begin_layout Plain Layout

length([_|T], N0, N) :-
\end_layout

\begin_layout Plain Layout

    N1 is N0 + 1,
\end_layout

\begin_layout Plain Layout

    length(T, N1, N).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The program in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:length-program"

\end_inset

 takes three arguments: a list, an accumulator used to successively accumulate
 the length, and the length of the list.
 To calculate the length, the third argument is passed as an unbound variable.
 On the other hand, if the length is instead a value, the predicate verifies
 if the relation between the list and the given length holds, and fails
 (returns false) otherwise.
\end_layout

\begin_layout Standard
Line
\begin_inset space ~
\end_inset

1 holds the first clause, which is a base (non-recursive) case that states
 that the length of an empty list is the same as the value of the accumulator.
 This means that the initial value of the accumulator must be zero in order
 for the relation to be meaningful.
\end_layout

\begin_layout Standard
Line
\begin_inset space ~
\end_inset

2 starts the second clause, which deals with non-empty lists.
 The list construct 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

[_|T]
\end_layout

\end_inset

 states that the head of the list (first element) is bound to an anonymous
 variable and the tail of the list (all but the first element) is bound
 to the variable 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

T
\end_layout

\end_inset

.
 The variable 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

N1
\end_layout

\end_inset

 is bound to the value of the current accumulator plus one, using the 
\emph on
is
\emph default
-operator to perform the arithmetic.
 The 
\begin_inset Quotes eld
\end_inset

plus
\begin_inset space ~
\end_inset

one
\begin_inset Quotes erd
\end_inset

 indicates that we have successfully counted one element, the head of the
 list.
 The predicate then continues by invoking itself recursively, passing the
 tail of the list, the updated accumulator, and the final length of the
 list.
 The final length is bound to the final value of the accumulator as soon
 as the tail of the list is empty and the base case can be matched.
\end_layout

\begin_layout Paragraph
Execution Example
\end_layout

\begin_layout Standard
In an interactive Prolog environment, the predicate in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:length-program"

\end_inset

 may be used as in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:tracing-a-predicate"

\end_inset

, providing a starting value of zero for the accumulator.
 The example is illustrated using a 
\begin_inset Quotes eld
\end_inset

trace
\begin_inset Quotes erd
\end_inset

, a debugging tool used extensively in Prolog to show each step taken to
 satisfy a query.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize},tabsize=4"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:tracing-a-predicate"

\end_inset

Tracing a predicate call.
\end_layout

\end_inset

[trace]  ?- length([a,b,c], 0, Length).
\end_layout

\begin_layout Plain Layout

   Call: (6) length([a, b, c], 0, _G391) ? creep
\end_layout

\begin_layout Plain Layout

^  Call: (7) _G476 is 0+1 ? creep
\end_layout

\begin_layout Plain Layout

^  Exit: (7) 1 is 0+1 ? creep
\end_layout

\begin_layout Plain Layout

   Call: (7) length([b, c], 1, _G391) ? creep
\end_layout

\begin_layout Plain Layout

^  Call: (8) _G479 is 1+1 ? creep
\end_layout

\begin_layout Plain Layout

^  Exit: (8) 2 is 1+1 ? creep
\end_layout

\begin_layout Plain Layout

   Call: (8) length([c], 2, _G391) ? creep
\end_layout

\begin_layout Plain Layout

^  Call: (9) _G482 is 2+1 ? creep
\end_layout

\begin_layout Plain Layout

^  Exit: (9) 3 is 2+1 ? creep
\end_layout

\begin_layout Plain Layout

   Call: (9) length([], 3, _G391) ? creep
\end_layout

\begin_layout Plain Layout

   Exit: (9) length([], 3, 3) ? creep
\end_layout

\begin_layout Plain Layout

   Exit: (8) length([c], 2, 3) ? creep
\end_layout

\begin_layout Plain Layout

   Exit: (7) length([b, c], 1, 3) ? creep
\end_layout

\begin_layout Plain Layout

   Exit: (6) length([a, b, c], 0, 3) ? creep
\end_layout

\begin_layout Plain Layout

Length = 3.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:tracing-a-predicate"

\end_inset

, line
\begin_inset space ~
\end_inset

1 shows the query being posed, which is to find the length of a list of
 three elements.
 Line
\begin_inset space ~
\end_inset

2 shows the first call being made, which matches the second clause of the
 predicate due to the non-empty list.
 Variables are renamed internally by Prolog and can be recognized by the
 
\begin_inset Quotes eld
\end_inset

_G
\begin_inset Quotes erd
\end_inset

 prefix.
 The initial accumulator of zero is incremented by one and bound to the
 variable 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

_G476
\end_layout

\end_inset

 on line
\begin_inset space ~
\end_inset

3.
 Line
\begin_inset space ~
\end_inset

4 indicates with the word 
\begin_inset Quotes eld
\end_inset

exit
\begin_inset Quotes erd
\end_inset

 that this call succeeded.
 Line
\begin_inset space ~
\end_inset

5 makes a recursive call with the tail of the list, the incremented accumulator
 and the same unbound variable used for the final result.
 This recursive process is repeated until line
\begin_inset space ~
\end_inset

11, where the tail of the list contains no elements.
\end_layout

\begin_layout Standard
On line
\begin_inset space ~
\end_inset

11, the first clause (the base case) of the predicate matches the empty
 list and so the resulting length is bound to the value of the accumulator,
 which is 3.
 Because the base case has been reached, no more steps are needed to satisfy
 the query.
 The recursion unfolds, showing the final bindings for each successful call
 on the way back to the initial call.
 The last argument is bound to the value 3 which is the expected answer.
\end_layout

\begin_layout Subsubsection
Anonymous Variables
\end_layout

\begin_layout Standard
It is often necessary to make a unification in order to access certain parts
 of a structure, but without caring for all the bindings created.
 In these cases, anonymous, or 
\begin_inset Quotes eld
\end_inset

don't care
\begin_inset Quotes erd
\end_inset

, variables can be used.
 These are denoted by an initial underscore.
 The predicate in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:length-program"

\end_inset

 uses such a variable because the actual value of the list head is of no
 importance.
 It suffices to know that an element exists.
\end_layout

\begin_layout Subsubsection
Pattern Matching and Branching
\end_layout

\begin_layout Standard
When invoking a predicate, a process called 
\begin_inset Quotes eld
\end_inset

pattern matching
\begin_inset Quotes erd
\end_inset

 is initiated 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
 Prolog tries to unify the given arguments with the formal parameters of
 the first clause of the predicate.
 If unification succeeds, Prolog proceeds to evaluate any and all premises
 present in the clause.
 If unification fails, Prolog reverts the effects of the unification so
 far, and repeats the process with the next clause of the predicate.
 This is called 
\begin_inset Quotes eld
\end_inset

backtracking
\begin_inset Quotes erd
\end_inset

 and is the Prolog equivalent to the 
\emph on
if
\emph default
-statement.
\end_layout

\begin_layout Standard
Calling the predicate in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:length-program"

\end_inset

 with a non-empty list will make Prolog first try to unify with the first
 clause.
 This fails, and the second clause is backtracked into.
 Should this clause also fail for some reason, the next clause after that
 would be tried, and so on, until no more clauses are found and the predicate
 fails.
 This process of backtracking implies that the order of clauses is often
 important.
\end_layout

\begin_layout Subsubsection
Recursion
\end_layout

\begin_layout Standard
Repetition is performed by recursion 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
 The predicate in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:length-program"

\end_inset

 is a recursive predicate because it is defined in terms of itself.
 To solve the problem of calculating the length of a list, the predicate
 solves a smaller problem, namely calculating the length of a shorter list:
 the tail.
 It works its way to the base case which is trivial enough to solve directly.
\end_layout

\begin_layout Subsubsection
Documentation Convention
\end_layout

\begin_layout Standard
When documenting Prolog predicates, each argument is usually prefixed with
 a symbol that indicates how the argument is supposed to behave 
\begin_inset CommandInset citation
LatexCommand cite
key "guidelines"

\end_inset

.
 The following documentation convention is employed by subsequent chapters.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
+ 
\emph on
Input.

\emph default
 Argument must be already instantiated.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
- 
\emph on
Output.

\emph default
 Argument must not be already instantiated, but become instantiated by the
 predicate.
\end_layout

\begin_layout Standard
A predicate is referred to by its name and arity (number of arguments),
 and, if applicable, its module: 
\emph on
module:predicate/arity
\emph default
.
 Should the 
\begin_inset Quotes eld
\end_inset

length
\begin_inset Quotes erd
\end_inset

 predicate in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:length-program"

\end_inset

 be defined in the module 
\begin_inset Quotes eld
\end_inset

lists
\begin_inset Quotes erd
\end_inset

, it would be referred to as 
\emph on
lists:length/3
\emph default
.
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Standard
This chapter outlines the functionality implemented by the driver.
\end_layout

\begin_layout Subsection
Suggested Features
\begin_inset CommandInset label
LatexCommand label
name "sub:Suggested-Features"

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
Mongo\SpecialChar \-
DB Driver Requirements
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "driver_req"

\end_inset

 list the following items as high priority for a driver to provide, in no
 particular order:
\end_layout

\begin_layout Enumerate
BSON serialization/deserialization,
\end_layout

\begin_layout Enumerate
full cursor support,
\end_layout

\begin_layout Enumerate
close exhausted cursors,
\end_layout

\begin_layout Enumerate
support for running database commands,
\end_layout

\begin_layout Enumerate
handle query errors,
\end_layout

\begin_layout Enumerate
convert all strings to UTF-8 (part of proper support for BSON),
\end_layout

\begin_layout Enumerate
hint, explain, count, $where,
\end_layout

\begin_layout Enumerate
database profiling,
\end_layout

\begin_layout Enumerate
advanced connection management, and
\end_layout

\begin_layout Enumerate
automatic reconnection.
\end_layout

\begin_layout Subsection
Selected Features
\end_layout

\begin_layout Standard
To keep development focused on providing just enough functionality to use
 the database system as data storage and retrieval, the implementation focuses
 on items 1-6 and omits items 7-10 from the list in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Suggested-Features"

\end_inset

.
 The selected requirements are further described in this section.
\end_layout

\begin_layout Subsubsection
BSON Conversion
\end_layout

\begin_layout Standard
The driver must be able to convert back and forth between some idiomatic
 Prolog structure and BSON encoded bytes.
\end_layout

\begin_layout Subsubsection
Connection Management
\end_layout

\begin_layout Standard
The driver must be able to obtain a connection to a database server using
 a TCP (Transmission Control Protocol) socket.
 All communication with the database is performed through this socket.
\end_layout

\begin_layout Subsubsection
Database Commands
\end_layout

\begin_layout Standard
The driver must be able to execute arbitrary database commands, such as
 creating and dropping collections.
\end_layout

\begin_layout Subsubsection
Document Handling
\end_layout

\begin_layout Standard
The driver must expose functionality to find, insert, update and delete
 documents in a collection, providing basic CRUD coverage.
\end_layout

\begin_layout Section
Design
\begin_inset CommandInset label
LatexCommand label
name "sec:Design"

\end_inset


\end_layout

\begin_layout Standard
This chapter discusses how documents are represented in Prolog, and describes
 the Application Programming Interface (API) of the driver.
\end_layout

\begin_layout Subsection
Documents in Prolog
\end_layout

\begin_layout Standard
One advantage of working in a high-level language such as Prolog is the
 ability to express complex structures as literals.
 Most functions in Mongo\SpecialChar \-
DB work with documents directly, so being able to
 easily construct and pass around document literals is helpful.
\end_layout

\begin_layout Standard
A BSON document is represented in Prolog as a list of key/value pairs.
 A pair is a structure named '-' (hyphen) with two arguments, a key and
 a value.
 Using a symbol as the name of the structure makes it possible to write
 it as an infix operator, avoiding the need for parentheses and making the
 key/value association more natural.
 Keys are UTF-8 encoded atoms, and values can be of several different types.
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:BSON-document"

\end_inset

 illustrates a document that embeds other documents.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:BSON-document"

\end_inset

BSON document as a Prolog literal.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

    '_id' - object_id('4dfb6a5de8d172995e7874d7'),
\end_layout

\begin_layout Plain Layout

    name - 'Prolog',
\end_layout

\begin_layout Plain Layout

    type - declarative,
\end_layout

\begin_layout Plain Layout

    major_implementations -
\end_layout

\begin_layout Plain Layout

        [
\end_layout

\begin_layout Plain Layout

            [
\end_layout

\begin_layout Plain Layout

                name - 'SWI-Prolog',
\end_layout

\begin_layout Plain Layout

                web - 'http://www.swi-prolog.org/'
\end_layout

\begin_layout Plain Layout

            ],
\end_layout

\begin_layout Plain Layout

            [
\end_layout

\begin_layout Plain Layout

                name - 'SICStus Prolog',
\end_layout

\begin_layout Plain Layout

                web - 'http://www.sics.se/sicstus/'
\end_layout

\begin_layout Plain Layout

            ]
\end_layout

\begin_layout Plain Layout

        ]
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Driver API
\begin_inset CommandInset label
LatexCommand label
name "sub:Driver-API"

\end_inset


\end_layout

\begin_layout Standard
This section details the interface for the driver.
\end_layout

\begin_layout Subsubsection
Server Connection
\end_layout

\begin_layout Paragraph
Obtaining a Connection
\end_layout

\begin_layout Standard
A connection to a Mongo\SpecialChar \-
DB server can be established by the predicate 
\emph on
new_connection/1,3
\emph default
.
 Two versions of the predicate are provided, one which assumes the default
 Mongo\SpecialChar \-
DB host and port, and one which allows this to be specified.
 If an error occurs during the setup, an exception is thrown.
 The predicate interfaces are described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-new_connection-1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-new_connection-3"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Connection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection established to the database server
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-new_connection-1"

\end_inset

Interface to 
\emph on
new_connection/1
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Host
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Host name of database server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port number of database server
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Connection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection established to the database server
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-new_connection-3"

\end_inset

Interface to 
\emph on
new_connection/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Releasing a Connection
\end_layout

\begin_layout Standard
When a connection is no longer needed it must be properly released back
 to the system.
 The predicate 
\emph on
free_connection/1
\emph default
 will release any resources associated with the given connection, rendering
 it unusable.
 Its interface is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-free-connection"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Connection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection to release
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-free-connection"

\end_inset

Interface to 
\emph on
free_connection/1
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Databases and Collections
\end_layout

\begin_layout Standard
A Mongo\SpecialChar \-
DB server can contain multiple logical databases, and each database
 can contain multiple document collections.
 Once a connection to the server has been established, a handle to a logical
 database can be produced by the predicate 
\emph on
get_database/3
\emph default
.
 The database need not exist beforehand as it will be created when first
 used.
 The predicate is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-get_database"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Connection
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+DatabaseName
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of the database to use
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Database
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database handle
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-get_database"

\end_inset

Interface to 
\emph on
get_database/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The database handle can be used to execute general database commands, but
 a collection handle must be retrieved when working with documents.
 This is accomplished by the predicate 
\emph on
get_collection/3
\emph default
, which returns a collection handle.
 The collection need not exist beforehand as it will be created when first
 used.
 Its interface is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-get_collection"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Database
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+CollectionName
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name of the collection to use
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-get_collection"

\end_inset

Interface to 
\emph on
get_collection/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Find Documents
\end_layout

\begin_layout Standard
Querying the database for documents is accomplished through the family of
 
\begin_inset Quotes eld
\end_inset

find
\begin_inset Quotes erd
\end_inset

 predicates.
 Depending on the nature of the query, different predicates can be used
 to retrieve, for example, a single document or all documents matching the
 query.
\end_layout

\begin_layout Standard
In general, a query returns documents in batches.
 A certain number of documents are returned with the query response, but
 if there are too many documents to fit in a single response, a 
\begin_inset Quotes eld
\end_inset

cursor
\begin_inset Quotes erd
\end_inset

 is established.
 The cursor can then be used to query for further documents.
\end_layout

\begin_layout Standard
The three main predicates for finding documents are 
\emph on
find/8
\emph default
, 
\emph on
find_one/4
\emph default
 and 
\emph on
find_all/4
\emph default
.
 The most general predicate is 
\emph on
find/8
\emph default
 which takes many arguments and offers very fine-grained control over the
 query.
 The interface to the predicate is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-find"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Query
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which documents to match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+ReturnFields
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which fields to return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Skip
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of documents to skip
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Limit
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of documents to return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Options
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of option atoms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Cursor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cursor used to fetch more documents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Docs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First batch of documents returned by the query
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-find"

\end_inset

Interface to 
\emph on
find/8
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The predicate 
\emph on
find_one/4
\emph default
 is intended for the common case where you only expect one matching document.
 If no matching document is found, the returned document is the atom 'nil'.
 The interface is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-find-one"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Query
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which document to match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+ReturnFields
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which fields to return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Doc
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document returned by the query
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-find-one"

\end_inset

Interface to 
\emph on
find_one/4
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The predicate 
\emph on
find_all/4
\emph default
 is intended for situations where all matching documents need processing
 and it is convenient to collect them into a single (potentially large)
 list.
 The interface is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-find-all"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Query
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which documents to match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+ReturnFields
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which fields to return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Docs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All documents returned by the query
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-find-all"

\end_inset

Interface to 
\emph on
find_all/4
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Using Cursors
\end_layout

\begin_layout Standard
When a query matches more documents than can be returned in a single response,
 a cursor is established and returned.
 A cursor is created and maintained by the database server, and it represents
 a pointer to a subset of the documents matched by a query 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
\end_layout

\begin_layout Standard
After making a query, the predicate 
\emph on
cursor_has_more/1
\emph default
 can be called on the given cursor.
 The predicate succeeds if more documents may be retrieved, and its interface
 is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-cursor-has-more"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Cursor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cursor to investigate
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-cursor-has-more"

\end_inset

Interface to 
\emph on
cursor_has_more/1
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If more documents need to be retrieved, the predicate 
\emph on
cursor_get_more/4
\emph default
 can be used.
 This predicate takes a cursor, returns a number of documents and also a
 new cursor handle representing the possibly modified state of the cursor.
 The interface is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-cursor-get-more"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Cursor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cursor to investigate
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Limit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of documents to return
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Docs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Documents returned by the query
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-NewCursor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
New state of Cursor
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-cursor-get-more"

\end_inset

Interface to 
\emph on
cursor_get_more/
\emph default
4.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When a cursor is no longer needed, it must be explicitly killed in order
 for the database to clean up any resources claimed by it.
 This is accomplished by the predicate 
\emph on
cursor_kill/1
\emph default
, described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-cursor-kill"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Cursor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cursor to kill
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-cursor-kill"

\end_inset

Interface to 
\emph on
cursor_kill/1
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If several cursors need to be killed, a more efficient version called 
\emph on
cursor_kill_batch/1
\emph default
 can be used to kill them in a single database call.
 This predicate is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-cursor-kill-batch"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Cursors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of cursors to kill
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-cursor-kill-batch"

\end_inset

Interface to 
\emph on
cursor_kill_batch/1
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Should all remaining documents matched by a query need to be retrieved in
 a single step, the predicate 
\emph on
cursor_exhaust/2
\emph default
 can be used.
 This is a convenience predicate that simply queries the cursor until all
 documents have been retrieved, and returns them as a single list.
 A cursor exhausted by this predicate need not be manually killed.
 The interface is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-cursor-exhaust"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Cursor
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cursor to exhaust (and automatically kill)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Docs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All remaining documents pointed to by the cursor
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-cursor-exhaust"

\end_inset

Interface to 
\emph on
cursor_exhaust/2
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Insert Documents
\end_layout

\begin_layout Standard
Two predicates are available to insert documents into a database collection.
 The simplest one is 
\emph on
insert/2
\emph default
, which accepts a collection handle and a document to insert, as described
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-insert"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Doc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document to insert
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-insert"

\end_inset

Interface to 
\emph on
insert/2
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If several documents need to be inserted, a more efficient predicate called
 
\emph on
insert_batch/3
\emph default
 may be used to send them in a single database call.
 This predicate is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-insert-batch"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Options
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of option atoms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Docs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of documents to insert
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-insert-batch"

\end_inset

Interface to 
\emph on
insert_batch/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Update Documents
\begin_inset CommandInset label
LatexCommand label
name "par:Update-Documents"

\end_inset


\end_layout

\begin_layout Standard
Updating a single document is done using the predicate 
\emph on
update/3
\emph default
.
 It accepts a collection handle, a selector document and a document describing
 the update to perform on the matched document.
 If several documents match the selector, only the first one is used.
 The interface is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-update"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Selector
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which document to match
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Modifier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing the update to perform
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-update"

\end_inset

Interface to 
\emph on
update/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If all matching documents need to be updated, a similar predicate called
 
\emph on
update_all/3
\emph default
 can be used.
 The interface to this predicate is identical to the one described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-update"

\end_inset

, but it performs the update on all matching documents instead of just the
 first.
\end_layout

\begin_layout Standard
A common use case is the combination of an update and an insert, sometimes
 called an 
\begin_inset Quotes eld
\end_inset

upsert
\begin_inset Quotes erd
\end_inset

.
 The predicate for this is called 
\emph on
upsert/3
\emph default
, and works like a normal update (described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-update"

\end_inset

) except that if the document does not exist it is inserted instead of updated
 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Delete Documents
\end_layout

\begin_layout Standard
Deleting documents from a collection is accomplished through the predicates
 
\emph on
delete/2
\emph default
 and 
\emph on
delete/3
\emph default
.
 Both predicates accept a collection handle and a 
\begin_inset Quotes eld
\end_inset

selector
\begin_inset Quotes erd
\end_inset

 document that describes which documents to match and delete.
 All matching documents are deleted unless the option atom 'single_remove'
 is supplied.
 The predicate interfaces are described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-delete-2"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-delete-3"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Selector
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which documents to delete
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-delete-2"

\end_inset

Interface to 
\emph on
delete/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Collection
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Collection handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Selector
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing which documents to delete
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Options
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
List of option atoms
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-delete-3"

\end_inset

Interface to 
\emph on
delete/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Database Commands
\end_layout

\begin_layout Standard
To query a database for information that does not deal with individual documents
, a predicate called 
\emph on
command/3
\emph default
 is provided.
 This predicate executes arbitrary database commands, such as dropping a
 collection, and is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-command"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Database
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Query
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing the command to execute
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Doc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing the result of the command
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-command"

\end_inset

Interface to 
\emph on
command/3
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Error Handling
\end_layout

\begin_layout Standard
Errors issued by a failed database query is detected by the driver and an
 exception is thrown that contains the error document returned by the database.
 The error document contains a key called 
\begin_inset Quotes eld
\end_inset

$err
\begin_inset Quotes erd
\end_inset

 that maps to an atom describing the nature of the error.
\end_layout

\begin_layout Standard
It is sometimes useful to get more information on a query than returned
 by the query itself.
 The predicate 
\emph on
get_last_error/2
\emph default
 returns a document describing the status of the last query executed through
 the same connection, and it is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:interface-get_last_error"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Argument
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
+Database
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database handle
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-Doc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Document describing the status of the last query
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:interface-get_last_error"

\end_inset

Interface to 
\emph on
get_last_error/2
\emph default
.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Usage Example
\end_layout

\begin_layout Standard
This chapter shows a small but complete example of how to use the driver
 by implementing a simple 
\begin_inset Quotes eld
\end_inset

to
\begin_inset space ~
\end_inset

do
\begin_inset Quotes erd
\end_inset

 application, illustrated in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:simple-to-do"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:simple-to-do"

\end_inset

Simple 
\begin_inset Quotes eld
\end_inset

to do
\begin_inset Quotes erd
\end_inset

 application.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

:- use_module(mongo(mongo)).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

todo :-
\end_layout

\begin_layout Plain Layout

    format('--- Simple Todo ---~n'),
\end_layout

\begin_layout Plain Layout

    mongo:new_connection(Connection),
\end_layout

\begin_layout Plain Layout

    mongo:get_database(Connection, todo, Database),
\end_layout

\begin_layout Plain Layout

    mongo:get_collection(Database, items, Collection),
\end_layout

\begin_layout Plain Layout

    action(list, Collection),
\end_layout

\begin_layout Plain Layout

    mongo:free_connection(Connection).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

action(list, Collection) :- !,
\end_layout

\begin_layout Plain Layout

    list_items(Collection),
\end_layout

\begin_layout Plain Layout

    new_action(Collection).
\end_layout

\begin_layout Plain Layout

action(add, Collection) :- !,
\end_layout

\begin_layout Plain Layout

    add_item(Collection),
\end_layout

\begin_layout Plain Layout

    new_action(Collection).
\end_layout

\begin_layout Plain Layout

action(delete, Collection) :- !,
\end_layout

\begin_layout Plain Layout

    delete_item(Collection),
\end_layout

\begin_layout Plain Layout

    new_action(Collection).
\end_layout

\begin_layout Plain Layout

action(quit, _Collection) :- !,
\end_layout

\begin_layout Plain Layout

    format('Bye!~n').
\end_layout

\begin_layout Plain Layout

action(_Unknown, Collection) :-
\end_layout

\begin_layout Plain Layout

    format('Unknown alternative.~n'),
\end_layout

\begin_layout Plain Layout

    new_action(Collection).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

new_action(Collection) :-
\end_layout

\begin_layout Plain Layout

    format('~nEnter list/add/delete/quit: '),
\end_layout

\begin_layout Plain Layout

    read(Action),
\end_layout

\begin_layout Plain Layout

    action(Action, Collection).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

list_items(Collection) :-
\end_layout

\begin_layout Plain Layout

    mongo:find_all(Collection, [], [], Docs),
\end_layout

\begin_layout Plain Layout

    print_items(Docs).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

print_items(Docs) :-
\end_layout

\begin_layout Plain Layout

    format('Id~26|Label~45|Priority~n'),
\end_layout

\begin_layout Plain Layout

    print_items_aux(Docs).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

print_items_aux([]).
\end_layout

\begin_layout Plain Layout

print_items_aux([Doc|Docs]) :-
\end_layout

\begin_layout Plain Layout

    bson:doc_get(Doc, '_id', object_id(Id)),
\end_layout

\begin_layout Plain Layout

    bson:doc_get(Doc, label, Label),
\end_layout

\begin_layout Plain Layout

    bson:doc_get(Doc, priority, Priority),
\end_layout

\begin_layout Plain Layout

    format('~w~26|~w~45|~w~n', [Id,Label,Priority]),
\end_layout

\begin_layout Plain Layout

    print_items_aux(Docs).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

add_item(Collection) :-
\end_layout

\begin_layout Plain Layout

    format('Label: '),
\end_layout

\begin_layout Plain Layout

    read(Label),
\end_layout

\begin_layout Plain Layout

    format('Priority: '),
\end_layout

\begin_layout Plain Layout

    read(Priority),
\end_layout

\begin_layout Plain Layout

    Doc = [label-Label,priority-Priority],
\end_layout

\begin_layout Plain Layout

    mongo:insert(Collection, Doc).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

delete_item(Collection) :-
\end_layout

\begin_layout Plain Layout

    format('Id: '),
\end_layout

\begin_layout Plain Layout

    read(Id),
\end_layout

\begin_layout Plain Layout

    mongo:delete(Collection, ['_id'-object_id(Id)]).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first line in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:simple-to-do"

\end_inset

 makes sure that the driver is properly loaded into the Prolog environment.
 The 
\emph on
todo/0
\emph default
 predicate is used to start the program.
 It establishes a database connection and obtains a handle to the collection
 
\begin_inset Quotes eld
\end_inset

items
\begin_inset Quotes erd
\end_inset

 residing in the database 
\begin_inset Quotes eld
\end_inset

todo
\begin_inset Quotes erd
\end_inset

.
 It then enters an 
\begin_inset Quotes eld
\end_inset

action
\begin_inset Quotes erd
\end_inset

 loop and eventually releases the connection when the loop stops.
\end_layout

\begin_layout Standard
The 
\emph on
action/2
\emph default
 predicate is the engine of the program, as it triggers the user to continuously
 enter new actions, until the 
\begin_inset Quotes eld
\end_inset

quit
\begin_inset Quotes erd
\end_inset

 action is given.
 Valid actions are 
\begin_inset Quotes eld
\end_inset

list
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

add
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

delete
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

quit.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

list
\begin_inset Quotes erd
\end_inset

 action fetches all documents stored in the collection and displays them
 in a formatted table.
 The 
\begin_inset Quotes eld
\end_inset

add
\begin_inset Quotes erd
\end_inset

 action asks the user to detail a new item by providing a label and a priority,
 and inserts it into the collection.
 The 
\begin_inset Quotes eld
\end_inset

delete
\begin_inset Quotes erd
\end_inset

 command asks the user for an object identifier and deletes the corresponding
 document from the collection.
\end_layout

\begin_layout Standard
An example of a usage session is depicted in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:using-the-to-do"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:using-the-to-do"

\end_inset

Using the 
\begin_inset Quotes eld
\end_inset

to do
\begin_inset Quotes erd
\end_inset

 application.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

?- todo.
\end_layout

\begin_layout Plain Layout

--- Simple Todo ---
\end_layout

\begin_layout Plain Layout

Id                        Label              Priority
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Enter list/add/delete/quit: add.
\end_layout

\begin_layout Plain Layout

Label: 'Make tea'.
\end_layout

\begin_layout Plain Layout

Priority: 1.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Enter list/add/delete/quit: add.
\end_layout

\begin_layout Plain Layout

Label: 'Go for a walk'.
\end_layout

\begin_layout Plain Layout

Priority: 2.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Enter list/add/delete/quit: list.
\end_layout

\begin_layout Plain Layout

Id                        Label              Priority
\end_layout

\begin_layout Plain Layout

4dff66bd4c594ffa3e17cb70  Make tea           1
\end_layout

\begin_layout Plain Layout

4dff66eb4c594ffa3e17cb71  Go for a walk      2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Enter list/add/delete/quit: delete.
\end_layout

\begin_layout Plain Layout

Id: '4dff66eb4c594ffa3e17cb71'.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Enter list/add/delete/quit: list.
\end_layout

\begin_layout Plain Layout

Id                        Label              Priority
\end_layout

\begin_layout Plain Layout

4dff66bd4c594ffa3e17cb70  Make tea           1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Enter list/add/delete/quit: quit.
\end_layout

\begin_layout Plain Layout

Bye!
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
This chapter describes how the design is implemented and what tools and
 techniques are used.
\end_layout

\begin_layout Subsection
Module Organization
\end_layout

\begin_layout Standard
The driver is organized into two primary modules: 
\emph on
mongo
\emph default
 and 
\emph on
bson
\emph default
.
 The mongo module is the main module which contains all the functionality
 needed to work with a MongoDB instance.
 This is the module that needs to be included in order to use the driver.
 The bson module exposes functionality to handle BSON conversions between
 documents and bytes, and also provides basic document manipulation predicates.
 The bson module is used internally by the mongo module, but implemented
 separately because BSON is not inherent to MongoDB and can be used on its
 own.
\end_layout

\begin_layout Subsection
Grammar Rules
\end_layout

\begin_layout Standard
Most of the code that converts to or from lists is implemented using the
 Definite Clause Grammar (DCG) syntax of Prolog 
\begin_inset CommandInset citation
LatexCommand cite
key "prolog"

\end_inset

.
 This syntax provides a convenient interface to 
\begin_inset Quotes eld
\end_inset

difference
\begin_inset space ~
\end_inset

lists
\begin_inset Quotes erd
\end_inset

, which is a common technique in Prolog to avoid unnecessary (and inefficient)
 list concatenation 
\begin_inset CommandInset citation
LatexCommand cite
key "okeefe"

\end_inset

.
\end_layout

\begin_layout Subsection
Network Communication
\end_layout

\begin_layout Standard
Communication with a MongoDB server instance is conducted through a TCP
 socket using a certain network protocol 
\begin_inset CommandInset citation
LatexCommand cite
key "wire"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Sockets
\end_layout

\begin_layout Standard
Sockets are handled using the socket library provided by SWI-Prolog 
\begin_inset CommandInset citation
LatexCommand cite
key "swi"

\end_inset

.
 The predicate 
\emph on
new_connection/1,3
\emph default
 (described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Design"

\end_inset

) creates a socket using 
\emph on
tcp_socket/1
\emph default
 and initializes it using 
\emph on
tcp_connect/4
\emph default
 which opens a read stream as well as a write stream.
 If an error is encountered during this process, an exception is thrown
 and the socket is destroyed.
\end_layout

\begin_layout Standard
The predicate 
\emph on
free_connection/1
\emph default
 (described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sec:Design"

\end_inset

) closes both streams and releases the socket using the library predicate
 
\emph on
close/2
\emph default
.
\end_layout

\begin_layout Subsubsection
Wire Protocol
\end_layout

\begin_layout Paragraph
Message Types
\end_layout

\begin_layout Standard
The protocol used for the network communication defines the message types
 listed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:message-types"

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "wire"

\end_inset

.
 All types except 
\emph on
OP_MSG
\emph default
 are implemented.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OpCode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_REPLY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server reply to a client message
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_MSG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Diagnostic message (deprecated)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_UPDATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Update documents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_INSERT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2002
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Insert documents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_QUERY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Find documents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_GET_MORE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retrieve documents from a cursor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_DELETE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Delete documents
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OP_KILL_CURSORS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2007
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Kill cursors
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:message-types"

\end_inset

Message types defined by the wire protocol.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A message is a sequence of bytes that represent a header followed by a payload.
 The format of the header is common to all messages and is used to describe
 the nature of the payload.
 The payload is the actual message, and different message types have different
 payload formats.
 The message header is defined as four 32-bit integers:
\end_layout

\begin_layout Enumerate
length of entire message (including header) in bytes,
\end_layout

\begin_layout Enumerate
request identifier, to uniquely identify a particular message,
\end_layout

\begin_layout Enumerate
response identifier, sent only in database replies to associate with a request
 identifier, and,
\end_layout

\begin_layout Enumerate
operation code, denoting the type of the message (the payload) following
 the header (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "tab:message-types"

\end_inset

).
\end_layout

\begin_layout Paragraph
Header Creation
\end_layout

\begin_layout Standard
The code for constructing a message header uses the DCG syntax and is defined
 in the internal module 
\emph on
mongo_bytes
\emph default
.
 This module contains predicates for converting various values into byte
 sequences, such as 
\emph on
int32
\emph default
 for converting an integer into four little-endian bytes, and 
\emph on
c_string
\emph default
 for converting an atom into a zero-terminated byte list.
 The predicate used to obtain the bytes for a header is shown in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Constructing-a-message"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Constructing-a-message"

\end_inset

Constructing a message header.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

header(RequestId, ResponseTo, OpCode) -->
\end_layout

\begin_layout Plain Layout

    [_,_,_,_], % Length of entire message.
\end_layout

\begin_layout Plain Layout

    int32(RequestId),
\end_layout

\begin_layout Plain Layout

    int32(ResponseTo),
\end_layout

\begin_layout Plain Layout

    int32(OpCode).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line
\begin_inset space ~
\end_inset

2 in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Constructing-a-message"

\end_inset

 creates a list of four (anonymous) variables.
 These represent the length of the entire message and are to be instantiated
 later as four bytes of a 32-bit little-endian integer.
 As soon as all bytes comprising the message have been created, they must
 be counted so that the length can be instantiated.
\end_layout

\begin_layout Paragraph
Message Creation
\end_layout

\begin_layout Standard
The code for constructing a complete message varies depending on the type
 of the message, but the idea remains the same: create a header with the
 appropriate metadata, and a payload formatted accordingly.
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Constructing-an-OP_QUERY"

\end_inset

 shows how to construct an 
\emph on
OP_QUERY
\emph default
 message.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Constructing-an-OP_QUERY"

\end_inset

Constructing an 
\emph on
OP_QUERY
\emph default
 message.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

build_bytes_for_find(
\end_layout

\begin_layout Plain Layout

    Namespace, Query, ReturnFields,
\end_layout

\begin_layout Plain Layout

    Skip, Limit, Flags)
\end_layout

\begin_layout Plain Layout

-->
\end_layout

\begin_layout Plain Layout

    mongo_bytes:header(0, 0, 2004),
\end_layout

\begin_layout Plain Layout

    mongo_bytes:int32(Flags),
\end_layout

\begin_layout Plain Layout

    mongo_bytes:c_string(Namespace),
\end_layout

\begin_layout Plain Layout

    mongo_bytes:int32(Skip),
\end_layout

\begin_layout Plain Layout

    mongo_bytes:int32(Limit),
\end_layout

\begin_layout Plain Layout

    mongo_bytes:bson_doc(Query),
\end_layout

\begin_layout Plain Layout

    mongo_bytes:bson_doc(ReturnFields).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line
\begin_inset space ~
\end_inset

5 in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Constructing-an-OP_QUERY"

\end_inset

 calls the header predicate defined in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Constructing-a-message"

\end_inset

 and passes as third argument the integer 2004 which represents the message
 type 
\emph on
OP_QUERY
\emph default
.
 The current implementation does not handle request or response identifiers,
 so these are simply filled with the value zero.
 The rest of the calls construct the actual contents of the message, converted
 to bytes in suitable ways.
\end_layout

\begin_layout Standard
When the message is constructed, its length is instantiated by the wrapper
 predicate that calls 
\emph on
build_bytes_for_find/6
\emph default
, shown in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Wrapping-build-bytes-for-find"

\end_inset

.
 This is a normal Prolog predicate that returns the message bytes as its
 last arguments.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Wrapping-build-bytes-for-find"

\end_inset

Wrapper for 
\emph on
OP_QUERY
\emph default
 message creation.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

build_bytes_for_find(
\end_layout

\begin_layout Plain Layout

    Namespace, Query, ReturnFields,
\end_layout

\begin_layout Plain Layout

    Skip, Limit, Flags, Bytes)
\end_layout

\begin_layout Plain Layout

:-
\end_layout

\begin_layout Plain Layout

    phrase(
\end_layout

\begin_layout Plain Layout

        build_bytes_for_find(
\end_layout

\begin_layout Plain Layout

            Namespace, Query, ReturnFields,
\end_layout

\begin_layout Plain Layout

            Skip, Limit, Flags),
\end_layout

\begin_layout Plain Layout

        Bytes),
\end_layout

\begin_layout Plain Layout

    mongo_bytes:count_bytes_and_set_length(Bytes).
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
API Implementation
\end_layout

\begin_layout Standard
On the highest level, all interaction with the database is initiated by
 the API predicates (described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Driver-API"

\end_inset

).
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:Implementation-of-find-8"

\end_inset

 shows how the interface predicate 
\emph on
find/8
\emph default
 is implemented.
 Other interface predicates are implemented in a similar fashion.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Implementation-of-find-8"

\end_inset

Implementation of 
\emph on
find/8
\emph default
.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

find(
\end_layout

\begin_layout Plain Layout

    Collection, Query, ReturnFields,
\end_layout

\begin_layout Plain Layout

    Skip, Limit, Options, Cursor, Docs)
\end_layout

\begin_layout Plain Layout

:-
\end_layout

\begin_layout Plain Layout

    mongo_collection:collection_namespace(
\end_layout

\begin_layout Plain Layout

        Collection, Namespace),
\end_layout

\begin_layout Plain Layout

    mongo_util:options_flags(
\end_layout

\begin_layout Plain Layout

        Options, mongo_find:option_value, Flags),
\end_layout

\begin_layout Plain Layout

    build_bytes_for_find(
\end_layout

\begin_layout Plain Layout

        Namespace, Query, ReturnFields,
\end_layout

\begin_layout Plain Layout

        Skip, Limit, Flags, BytesToSend),
\end_layout

\begin_layout Plain Layout

    mongo_collection:collection_connection(
\end_layout

\begin_layout Plain Layout

        Collection, Connection),
\end_layout

\begin_layout Plain Layout

    mongo_connection:send_to_server(
\end_layout

\begin_layout Plain Layout

        Connection, BytesToSend),
\end_layout

\begin_layout Plain Layout

    mongo_connection:read_reply(
\end_layout

\begin_layout Plain Layout

        Connection, _Header, Info, Docs),
\end_layout

\begin_layout Plain Layout

    Info = info(ReturnFlags,CursorId,_,_),
\end_layout

\begin_layout Plain Layout

    throw_on_error(ReturnFlags, Docs),
\end_layout

\begin_layout Plain Layout

    mongo_cursor:new_cursor(
\end_layout

\begin_layout Plain Layout

        Collection, CursorId, Cursor).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Line
\begin_inset space ~
\end_inset

5 in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:Implementation-of-find-8"

\end_inset

 extracts a namespace atom from the collection handle.
 A namespace is a collection identifier of the format 
\begin_inset Quotes eld
\end_inset

database.collection
\begin_inset Quotes erd
\end_inset

 that is used to uniquely identify a collection within a database server
 instance.
 Line
\begin_inset space ~
\end_inset

7 converts the list of query options into a bitmask.
 Line
\begin_inset space ~
\end_inset

9 calls the predicate 
\emph on
build_bytes_for_find/7
\emph default
 (shown in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand formatted
reference "lis:Wrapping-build-bytes-for-find"

\end_inset

) to create the actual message bytes.
 Line
\begin_inset space ~
\end_inset

12 extracts the connection handle from the collection handle.
 Line
\begin_inset space ~
\end_inset

14 transmits the message over the socket established in the connection handle,
 and line
\begin_inset space ~
\end_inset

16 waits for a reply from the server.
 When the reply has been received, any return codes and a (possibly undefined)
 cursor identifier is extracted from it.
 The status of the reply is checked on line
\begin_inset space ~
\end_inset

19, and a cursor handle is created on line
\begin_inset space ~
\end_inset

20.
 Any documents returned with the reply are also extracted and returned as
 the last argument.
\end_layout

\begin_layout Subsection
BSON Handling
\end_layout

\begin_layout Standard
When a driver communicates with a Mongo\SpecialChar \-
DB instance, documents are transmitted
 over the network as bytes of BSON.
 The driver converts Prolog documents into series of BSON bytes before sending
 them to the database, and documents in database responses are converted
 back to Prolog documents again.
\end_layout

\begin_layout Subsubsection
BSON Example
\end_layout

\begin_layout Standard
Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:A-simple-Prolog"

\end_inset

 shows an example of a document represented in Prolog.
 When this document is converted to BSON bytes, it is internally interpreted
 as the document in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:A-simple-Prolog-actual"

\end_inset

 because lists (or arrays) are just a convenience notation for normal embedded
 documents 
\begin_inset CommandInset citation
LatexCommand cite
key "bson"

\end_inset

.
 For the full BSON specification, see 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://bsonspec.org/
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:A-simple-Prolog"

\end_inset

A simple Prolog document.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

    hello - [atom, 5.05, 1986]
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:A-simple-Prolog-actual"

\end_inset

A simple Prolog document in its actual interpretation.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

    hello - ['0'-atom, '1'-5.05, '2'-1986]
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the document in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:A-simple-Prolog-actual"

\end_inset

 is converted to BSON, the bytes obtained are shown in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Byte-sequence-for-document"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Byte-sequence-for-document"

\end_inset

Byte sequence for a simple document.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

  47,0,0,0, % Length of entire doc.
\end_layout

\begin_layout Plain Layout

  0x04, % Tag, embedded array.
\end_layout

\begin_layout Plain Layout

    104,101,108,108,111, 0, % Key name, hello.
\end_layout

\begin_layout Plain Layout

    38,0,0,0, % Length of embedded array.
\end_layout

\begin_layout Plain Layout

    0x02, % Tag, string.
\end_layout

\begin_layout Plain Layout

      48, 0, % Key name, index '0'.
\end_layout

\begin_layout Plain Layout

      5,0,0,0, % String's byte length, incl.
 zero.
\end_layout

\begin_layout Plain Layout

      97,116,111,109, 0, % String data.
\end_layout

\begin_layout Plain Layout

    0x01, % Tag, double.
\end_layout

\begin_layout Plain Layout

      49, 0, % Key name, index '1'.
\end_layout

\begin_layout Plain Layout

      51,51,51,51,51,51,20,64, % Double 8-byte data.
\end_layout

\begin_layout Plain Layout

    0x10, % Tag, 32-bit integer.
\end_layout

\begin_layout Plain Layout

      50, 0, % Key name, index '2'.
\end_layout

\begin_layout Plain Layout

      194,7,0,0, % Int32 data.
\end_layout

\begin_layout Plain Layout

    0, % End of embedded array.
\end_layout

\begin_layout Plain Layout

  0 % End of entire doc.
\end_layout

\begin_layout Plain Layout

]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Conversion Predicates
\end_layout

\begin_layout Standard
When converting between Prolog documents and BSON encoded bytes, the relation
 
\emph on
doc_bytes/2
\emph default
 within the 
\emph on
bson
\emph default
 module can be used.
 This is a two-way relation that either accepts a document and returns bytes,
 or accepts bytes and returns a document.
\end_layout

\begin_layout Standard
Calling 
\emph on
doc_bytes/2
\emph default
 with an empty document would look like listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Converting-the-empty"

\end_inset

.
 Calling it with the document in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:A-simple-Prolog"

\end_inset

 would result in the byte sequence in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Byte-sequence-for-document"

\end_inset

, and vice versa.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Converting-the-empty"

\end_inset

Converting the empty document into bytes.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

?- bson:doc_bytes([], Bytes).
\end_layout

\begin_layout Plain Layout

Bytes = [5,0,0,0,0]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If a series of BSON bytes represents a concatenation of documents, the relation
 
\emph on
docs_bytes/2
\emph default
 can be used.
 This predicate expects the documents to be wrapped in a list, and an example
 containing two empty documents is shown in listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Converting-byte-list-concatenati"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Converting-byte-list-concatenati"

\end_inset

Converting byte-list concatenations.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

?- bson:docs_bytes(Docs, [5,0,0,0,0,5,0,0,0,0]).
\end_layout

\begin_layout Plain Layout

Docs = [[],[]]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Document Manipulation
\end_layout

\begin_layout Standard
To make working with documents easier, a set of simple helper predicates
 are provided.
 These predicates make it easier to get, put and delete individual fields,
 but also provide functionality like extracting all keys or values from
 a document.
 Listing
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Using-document-manipulation"

\end_inset

 shows the result of using some of the manipulation predicates on a simple
 document.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\ttfamily},numbers=left,numberstyle={\scriptsize}"
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Using-document-manipulation"

\end_inset

Using document manipulation helpers.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

?- Doc = [name-prolog, type-declarative],
\end_layout

\begin_layout Plain Layout

   bson:doc_get(Doc, name, Name),
\end_layout

\begin_layout Plain Layout

   bson:doc_put(Doc, name, 'Prolog', NewDoc),
\end_layout

\begin_layout Plain Layout

   bson:doc_values(NewDoc, Values).
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Doc = [name-prolog, type-declarative],
\end_layout

\begin_layout Plain Layout

Name = prolog,
\end_layout

\begin_layout Plain Layout

NewDoc = [name-'Prolog', type-declarative],
\end_layout

\begin_layout Plain Layout

Values = ['Prolog', declarative].
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C Extension
\end_layout

\begin_layout Standard
A small part of the BSON handling is written in C instead of Prolog.
 This part involves conversion of integers and floats to and from bytes.
 The two reasons for this are efficiency and ease of programming.
\end_layout

\begin_layout Standard
Being able to subvert the type system in C makes it trivial to populate
 a fixed-width number with individual bytes and then interpret them as a
 whole.
 This is especially convenient when converting between bytes and floating-point
 numbers.
\end_layout

\begin_layout Standard
BSON conversion is something the driver does very often, and pushing common
 operations down to a lower-level language is likely more efficient.
\end_layout

\begin_layout Subsection
Test Suite
\end_layout

\begin_layout Standard
Unit testing is conducted using 
\emph on
PlUnit,
\emph default
 a unit testing framework built into SWI-Prolog and designed to be compatible
 with other Prolog implementations 
\begin_inset CommandInset citation
LatexCommand cite
key "plunit"

\end_inset

.
\end_layout

\begin_layout Subsection
Environment
\end_layout

\begin_layout Standard
The technical environment used during development is as follows:
\end_layout

\begin_layout Description
POSIX The driver is developed on a POSIX (Portable Operating System Interface
 for Unix) compliant system.
\end_layout

\begin_layout Description
Prolog The driver is developed and tested on SWI-Prolog 5.10.2.
\end_layout

\begin_layout Description
C
\begin_inset space ~
\end_inset

Compiler A C compiler is required to build parts of the low-level BSON handling.
\end_layout

\begin_layout Description
MongoDB The driver is tested on Mongo\SpecialChar \-
DB versions 1.8.0 through 1.8.2.
\end_layout

\begin_layout Section
Conclusions and Future Work
\end_layout

\begin_layout Standard
The driver enables Mongo\SpecialChar \-
DB to be used from Prolog as a basic data storage
 system.
 The major functionality of finding, inserting, updating and deleting documents
 is present.
 Arbitrary database commands can be executed, providing the possibility
 to administrate the database system.
\end_layout

\begin_layout Standard
More advanced functionality offered by Mongo\SpecialChar \-
DB such as dealing with 
\begin_inset Quotes eld
\end_inset

replica
\begin_inset space ~
\end_inset

sets
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "mongo"

\end_inset

 and automatic server reconnection is not implemented.
 This makes the current state of the driver useful only for small scale
 applications without need for great reliability and availability.
 This is the most obvious area for future improvement.
\end_layout

\begin_layout Standard
Making the driver compatible with different Prolog implementations requires
 some work.
 The UTF-8 handling makes extensive use of a facility in SWI-Prolog called
 
\begin_inset Quotes eld
\end_inset

memory files
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "swi"

\end_inset

 which are unlikely to be similar or even exist in other implementations.
\end_layout

\begin_layout Standard
Another compatibility challenge is most likely the C extension.
 SWI-Prolog has a solid mechanism for working with C, including a compiler
 front-end to properly join Prolog and C together.
 Other implementations might not provide this.
\end_layout

\begin_layout Standard
On the other hand, incorporating C code has the benefit of performance.
 The company behind Mongo\SpecialChar \-
DB maintains a permissively licensed open source
 implementation of BSON written in C 
\begin_inset CommandInset citation
LatexCommand cite
key "bson"

\end_inset

.
 Replacing the Prolog implementation with this C library would lighten the
 code base considerably and probably make the driver faster.
\end_layout

\begin_layout Standard
The module system described in the current Prolog standard is considered
 flawed and therefore not implemented by most Prologs 
\begin_inset CommandInset citation
LatexCommand cite
key "swi"

\end_inset

.
 The driver is built around the module system present in SWI-Prolog, which
 is similar to those of other popular Prologs, such as SICStus Prolog, Ciao
 and YAP.
 Making the module usage completely compatible with these systems might
 require some work.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "mongo"

\end_inset

Chodorow, K.
 & Dirolf, M.
 (2010) 
\emph on
MongoDB: The Definitive Guide.

\emph default
 Sebastopol, United States of America: O'Reilly Media, Inc.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bson"

\end_inset

BSON Specification.
 Accessed 2011-06-07.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://bsonspec.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "json"

\end_inset

JSON Specification.
 Accessed 2011-06-19.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.json.org/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "bratko"

\end_inset

Bratko, I.
 (2001) 
\emph on
Prolog Programming for Artificial Intelligence.

\emph default
 3rd ed.
 Essex, England: Pearson Education Limited.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "prolog"

\end_inset

Clocksin, W.
 F.
 & Mellish, C.
 S.
 (1994) 
\emph on
Programming in Prolog.

\emph default
 4th ed.
 New York, United States of America: Springer-Verlag.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "swi"

\end_inset

SWI-Prolog Reference Manual.
 Accessed 2011-06-19.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.swi-prolog.org/pldoc/refman/
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "guidelines"

\end_inset

Covington, M.
 A.
 et al.
 
\begin_inset Quotes eld
\end_inset

Some Coding Guidelines for Prolog.
\begin_inset Quotes erd
\end_inset

 3
\begin_inset space ~
\end_inset

Sep.
\begin_inset space ~
\end_inset

2009.
 Accessed 2011-06-19.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.ai.uga.edu/mc/plcoding.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "driver_req"

\end_inset

Mongo Driver Requirements.
 Accessed 2011-06-19.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.mongodb.org/display/DOCS/Mongo+Driver+Requirements
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "okeefe"

\end_inset

O'Keefe, R.
 A.
 (1990) 
\emph on
The Craft of Prolog.

\emph default
 Cambridge, United States of America: The MIT Press.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "wire"

\end_inset

Mongo Wire Protocol.
 Accessed 2011-06-19.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.mongodb.org/display/DOCS/Mongo+Wire+Protocol
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "plunit"

\end_inset

Prolog Unit Tests.
 Accessed 2011-06-19.
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.swi-prolog.org/pldoc/package/plunit.html
\end_layout

\end_inset


\end_layout

\end_body
\end_document
